1. If we put a coercion to convert the type to itself, then we will
get into an infinite recursion, as apply-generic will realise that there's 
no operation, but will find the coercion, so will call apply-generic with
the coercion (which in turn doesn't find the operation).

2. No, he's wrong, as there's no function and no coercion, therefore
apply generic will correctly return an error

3. #lang sicp

(define (apply-generic op . args)
  (let ((type-tags (map type-tag args)))
    (let ((proc (get op type-tags)))
      (if proc
          (apply proc (map contents args))
          (if (= (length args) 2)
              (let ((type1 (car type-tags))
                    (type2 (cadr type-tags))
                    (a1 (car args))
                    (a2 (cadr args)))
                (if (eq? type1 type2)
                    (error "No method for these types"
                           (list op type-tags))
                    (let ((t1->t2 (get-coercion type1
                                                type2))
                          (t2->t1 (get-coercion type2 
                                                type1))))
                   (cond (t1->t2 (apply-generic op (t1->t2 a1) a2))
                         (t2->t1) (apply-generic op a1 (t2->t1 a2))
                         (else (error "No method for these types"
                                       (list op type-tags))))))
              (error 
               "No method for these types"
               (list op type-tags)))))))

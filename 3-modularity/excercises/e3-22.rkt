#lang sicp

(define (make-queue)
  (let ((front-ptr '())
        (rear-ptr '()))
    (define (empty?) (null? front-ptr))
    (define (insert item)
      (let ((new-pair (cons item '())))
        (if (empty?)
            (begin (set! front-ptr new-pair)
                   (set! rear-ptr new-pair))
            (begin (set-cdr! rear-ptr new-pair)
                   (set! rear-ptr new-pair)))))
    (define (delete)
      (if (empty?)
          (error "Q Empty")
          (set! front-ptr (cdr front-ptr))))
    (define (print q)
      (if (null? q)
          (display "\n")
          (begin (display (car q)) (display ",") (print (cdr q)))))
        
    (define (dispatch m)
      (cond ((eq? m 'empty?) empty?)
            ((eq? m 'insert) insert)
            ((eq? m 'delete) delete)
            ((eq? m 'print) (lambda() (print front-ptr))))) 
    
    dispatch))

(define q (make-queue))
((q 'insert) 10)
((q 'insert) 11)
((q 'insert) 12)
((q 'print))
((q 'delete))
((q 'print))
